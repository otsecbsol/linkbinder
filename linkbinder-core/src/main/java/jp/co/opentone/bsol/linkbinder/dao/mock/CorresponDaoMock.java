/*
 * Copyright 2016 OPEN TONE Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jp.co.opentone.bsol.linkbinder.dao.mock;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Repository;

import jp.co.opentone.bsol.framework.core.dao.KeyDuplicateException;
import jp.co.opentone.bsol.framework.core.dao.RecordNotFoundException;
import jp.co.opentone.bsol.framework.core.dao.StaleRecordException;
import jp.co.opentone.bsol.linkbinder.dao.AbstractDao;
import jp.co.opentone.bsol.linkbinder.dao.CorresponDao;
import jp.co.opentone.bsol.linkbinder.dto.Correspon;
import jp.co.opentone.bsol.linkbinder.dto.CorresponGroup;
import jp.co.opentone.bsol.linkbinder.dto.CorresponGroupSummary;
import jp.co.opentone.bsol.linkbinder.dto.CorresponResponseHistory;
import jp.co.opentone.bsol.linkbinder.dto.CorresponType;
import jp.co.opentone.bsol.linkbinder.dto.CorresponUserSummary;
import jp.co.opentone.bsol.linkbinder.dto.RSSCorrespon;
import jp.co.opentone.bsol.linkbinder.dto.User;
import jp.co.opentone.bsol.linkbinder.dto.WorkflowPattern;
import jp.co.opentone.bsol.linkbinder.dto.code.CorresponStatus;
import jp.co.opentone.bsol.linkbinder.dto.code.WorkflowStatus;
import jp.co.opentone.bsol.linkbinder.dto.condition.SearchCorresponCondition;
import jp.co.opentone.bsol.linkbinder.dto.condition.SearchCorresponUserSummaryCondition;
import jp.co.opentone.bsol.linkbinder.dto.condition.SearchRSSCorresponCondition;

@Repository
public class CorresponDaoMock extends AbstractDao<Correspon> implements CorresponDao {

    /**
     *
     */
    private static final long serialVersionUID = 804873318385146067L;

    public CorresponDaoMock() {
        super("mock");
    }

    @Override
    public Correspon findById(Long id) throws RecordNotFoundException {
        Correspon c = new Correspon();
        c.setId(id);
        c.setProjectId("PJ1");
        c.setCorresponNo("YOC:OT:BUILDING-00002");
        c.setParentCorresponId(new Long(1L));
        c.setCorresponStatus(CorresponStatus.OPEN);

        // c.setWorkflowStatus(WorkflowStatus.DRAFT);
        c.setWorkflowStatus(WorkflowStatus.ISSUED);

        c.setVersionNo(1L);

        CorresponGroup from = new CorresponGroup();
        from.setId(new Long(1L));
        from.setName("YOC:BUILDING");
        c.setFromCorresponGroup(from);

        WorkflowPattern wp = new WorkflowPattern();
        wp.setWorkflowCd("pattern1");

        CorresponType ct = new CorresponType();
        ct.setId(new Long(1L));
        ct.setName("Request");
        ct.setWorkflowPattern(wp);
        c.setCorresponType(ct);
        c.setSubject("Mock");
        c.setBody("This is test.\nThis correspondence is generated by CorresponServiceImpl.");
        c.setDeadlineForReply(new GregorianCalendar(2009, 3, 3).getTime());
        c.setFile1FileId("12345");
        c.setFile1Id(new Long(1));
        c.setFile1FileName("test.xls");
        c.setFile2Id(new Long(2));
        c.setFile2FileId("67890");
        c.setFile2FileName("test.txt");
        c.setCustomField1Id(new Long(1));
        c.setCustomField1Label("CustomFieldLabel1");
        c.setCustomField1Value("This is customField1Value.");
        c.setCreatedAt(new GregorianCalendar(2009, 3, 1, 9, 3, 23).getTime());
        User u = new User();
        u.setEmpNo("00001");
        u.setNameE("Test User");
        c.setCreatedBy(u);

        return c;
    }

    public List<Correspon> find(SearchCorresponCondition condition) {
        List<Correspon> list = new ArrayList<Correspon>();
        try {
            Correspon correspon1 = findById(new Long(1));
            Correspon correspon2 = findById(new Long(1));
            correspon2.setId(new Long(2));
            correspon2.getFromCorresponGroup().setName("YOC:BUILDING2");
            correspon2.setSubject("Mock4");
            correspon2.setCorresponNo("YOC:OT:BUILDING-00001");
            Correspon correspon3 = findById(new Long(1));
            correspon3.setId(new Long(3));
            correspon3.getFromCorresponGroup().setName("YOC:BUILDING99");
            correspon3.setSubject("test:<BR></TABLE><%=%>");
            correspon3.setCorresponNo("YOC:OT:BUILDING-00000");
            Correspon correspon4 = findById(new Long(1));
            correspon4.setId(new Long(4));
            correspon4.getFromCorresponGroup().setName("0_YOC:BUILDING");
            correspon4.setSubject("test:><$%&\"'?-");
            correspon4.setCorresponNo("YOC:OT:BUILDING-00004");

            if ("corresponNo".equals(condition.getSort())) {
                if (condition.isAscending()) {
                    list.add(correspon3);
                    list.add(correspon2);
                    list.add(correspon1);
                    list.add(correspon4);
                } else {
                    list.add(correspon4);
                    list.add(correspon1);
                    list.add(correspon2);
                    list.add(correspon3);
                }
            } else if ("from".equals(condition.getSort())) {
                if (condition.isAscending()) {
                    list.add(correspon4);
                    list.add(correspon1);
                    list.add(correspon2);
                    list.add(correspon3);
                } else {
                    list.add(correspon3);
                    list.add(correspon2);
                    list.add(correspon1);
                    list.add(correspon4);
                }
            } else if ("subject".equals(condition.getSort())) {
                if (condition.isAscending()) {
                    list.add(correspon1);
                    list.add(correspon4);
                    list.add(correspon3);
                    list.add(correspon2);
                } else {
                    list.add(correspon2);
                    list.add(correspon3);
                    list.add(correspon4);
                    list.add(correspon1);
                }
            } else {
                if (condition.isAscending()) {
                    list.add(correspon1);
                    list.add(correspon2);
                    list.add(correspon3);
                    list.add(correspon4);
                } else {
                    list.add(correspon4);
                    list.add(correspon3);
                    list.add(correspon2);
                    list.add(correspon1);
                }
            }

        } catch (RecordNotFoundException e) {

        }
        return list;
    }

    public int count(SearchCorresponCondition condition) {
        return 214;
    }

    public Correspon findTopParent(Long id) throws RecordNotFoundException {
        Correspon c = new Correspon();
        c.setId(id);
        c.setProjectId("PJ1");
        c.setCorresponNo("YOC:OT:BUILDING-00002");
        c.setParentCorresponId(new Long(1L));
        c.setCorresponStatus(CorresponStatus.OPEN);
        c.setWorkflowStatus(WorkflowStatus.DRAFT);
        c.setVersionNo(1L);

        CorresponGroup from = new CorresponGroup();
        from.setId(new Long(1L));
        from.setName("YOC:BUILDING");
        c.setFromCorresponGroup(from);

        WorkflowPattern wp = new WorkflowPattern();
        wp.setWorkflowCd("pattern1");

        CorresponType ct = new CorresponType();
        ct.setId(new Long(1L));
        ct.setName("Request");
        ct.setWorkflowPattern(wp);
        c.setCorresponType(ct);
        c.setSubject("Mock");
        c.setBody("This is test.\nThis correspondence is generated by CorresponServiceImpl.");
        c.setDeadlineForReply(new GregorianCalendar(2009, 3, 3).getTime());
        c.setFile1FileId("12345");
        c.setFile1Id(new Long(1));
        c.setFile1FileName("test.xls");
        c.setFile2Id(new Long(2));
        c.setFile2FileId("67890");
        c.setFile2FileName("test.txt");
        c.setCustomField1Id(new Long(1));
        c.setCustomField1Label("CustomFieldLabel1");
        c.setCustomField1Value("This is customField1Value.");
        c.setCreatedAt(new GregorianCalendar(2009, 3, 1, 9, 3, 23).getTime());
        User u = new User();
        u.setEmpNo("00001");
        u.setNameE("Test User");
        c.setCreatedBy(u);

        return c;
    }

    @Override
    public Integer update(Correspon entity) throws KeyDuplicateException, StaleRecordException {

        // デバッグ
        System.out.println("コレポン文書アップデート処理開始");

        return update(entity, SQL_ID_UPDATE);
    }

    private Integer update(Correspon dto, String sqlId) throws KeyDuplicateException,
        StaleRecordException {

        System.out.println("コレポン文書承認状態：" + dto.getWorkflowStatus().getLabel());
        System.out.println("---------コレポン文書アップデート完了---------");

        // checkVersionNo(dto);
        try {
            // return getSqlMapClientTemplate().update(getSqlId(sqlId), dto);
            return 1;
        } catch (DataIntegrityViolationException e) {
            // KeyDuplicateException ex =
            // new KeyDuplicateException(
            // "primary key or foreign key duplicate.", dto);
            // ex.initCause(e);
            // throw ex;
            throw e;
        }
    }

    /*
     * (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao
     *     #findCorresponGroupSummary(java.lang.String, jp.co.opentone.bsol.linkbinder.dto.CorresponGroup[])
     */
    public List<CorresponGroupSummary> findCorresponGroupSummary(String projectId,
                                                                 CorresponGroup[] groupUsers) {
        return null;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findCorresponUserSummary(jp.co.opentone.bsol.linkbinder.dto.condition.SearchCorresponUserSummaryCondition)
     */
    public CorresponUserSummary findCorresponUserSummary(
        SearchCorresponUserSummaryCondition condition) {
        return null;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findCorresponByCustomField()
     */
    public int countCorresponByCustomField(Long projectCustomFieldId) {
        return 0;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findReplyCorresponByAddressUserId(java.lang.Long)
     */
    public List<Correspon> findReplyCorresponByAddressUserId(Long addressUserId) {
        return null;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findReplyCorresponByAddressGroupId(java.lang.Long)
     */
    public List<Correspon> findReplyCorresponByGroupId(Long corresponId, Long addressGroupId) {
        return null;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#countCorresponByCorresponType(java.lang.Long)
     */
    public int countCorresponByCorresponType(Long projectCorresponTypeId) {
        return 0;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#updateChildrenCorresponStatus(jp.co.opentone.bsol.linkbinder.dto.Correspon)
     */
    public int updateChildrenCorresponStatus(Correspon parent) {
        // TODO Auto-generated method stub
        return 0;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findRSSCorrespon(jp.co.opentone.bsol.linkbinder.dto.condition.SearchRSSCorresponCondition)
     */
    public List<RSSCorrespon> findRSSCorrespon(SearchRSSCorresponCondition condition) {
        // TODO Auto-generated method stub
        return null;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findRootCorresponId(java.lang.Long)
     */
    public Long findRootCorresponId(Long corresponId) {
        return null;
    }

    /* (non-Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findCorresponResponseHistory(java.lang.Long)
     */
    public List<CorresponResponseHistory> findCorresponResponseHistory(
        Long corresponId, Long currentCorresponId) {
        return null;
    }

    public List<Long> findId(SearchCorresponCondition condition) {
        return null;
    }

    /* (非 Javadoc)
     * @see jp.co.opentone.bsol.linkbinder.dao.CorresponDao#findIdInPage(jp.co.opentone.bsol.linkbinder.dto.condition.SearchCorresponCondition)
     */
    @Override
    public List<Long> findIdInPage(SearchCorresponCondition condition) {
        return null;
    }

    @Override
    public Long insertLearningCorrespon(Correspon correspon) { return null; }
}
